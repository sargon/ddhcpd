A Distributed DHCP Daemon
=========================

In self managed networks with decentralized client realms a central DHCP
server is not available. DDHCP allows every realm to have its own server,
while preserving roaming features for the client, by maintaining a common
consens about lease state.

The IPv4 address range is divided into many small blocks. Each node claims a
number of spare blocks. Clients are assigned free addresses from those blocks if
the node has enough addresses left to assign. There is a limit for how many free
addresses a node has to hold. If this limit is exceeded, it reserves new blocks.

The implementation is very flexible, meaning we do not prevent you from doing
very stupid stuff, but also allow you maximal adaption.

    Usage: ddhcp [-h] [-d|-D] [-L] [-c CLT-IFACE] [-i SRV-IFACE] [-t TENTATIVE-TIMEOUT]

    -h                     This usage information.
    -c CLT-IFACE           Interface on which requests from clients are handled
    -i SRV-IFACE           Interface on which different servers communicate
    -t TENTATIVE           Time required for a block to be claimed
    -N NETWORK/CIDR        Network to announce and manage blocks in
    -o CODE:LEN:P1. .. .Pn DHCP Option with code.len and #len chars in decimal
    -b BLKSIZEPOW          Power over two of block size
    -s SPAREBLKS           Amount of spare blocks
    -L                     Deactivate learning phase
    -d                     Run in background and daemonize
    -D                     Run in foreground and log to console (default)
    -C CTRL_PATH           Path to control socket

Build
-----

    DEBUG=1 CFLAGS="-D LOG_LEVEL=20" make clean all

Running
-------

On a gluon node the command should look like something like this:.

    ddhcpd -o "3:4:10.116.254.254" -o "1:4:255.255.128.0" -o "28:4:10.116.254.255" -N 10.116.224.0/20 -b 2 -s 1 -c br-client -i bat0

As you can see we can register dhcp options during startup, but we also
can change the during runtime, i.e. the standard gateway:

    ddhcpdctl -o "3:4:10.116.254.253"

or further add knowledge about a emerged timeserver 

    ddhcpdctl -o "42:4:10.116.254.252"

and later remove those entries:.

    ddhcpdctl -r "42"

Be careful with this, as stated above we do not save you from doing dumb things.

Hook
----

If you like to act on events of ddhcpd you may register a binary via the '-H' 
command. Every time an event that binary will be called. The binary is given
a list of arguments:

  <command> [lease|release] <ip-addr> <hwaddr>

Testing
-------

The network-test script can create a setup of virtual interfaces
which is composed of a <number> of server and client interface pairs.
Which are called srvX and cltX in the main network namespace and server0
and client0 in the ''daemon'' network namespace. All srvX are bridged
via br-srv, so the daemons can talk to each other.

Inside the daemon network ns the client0 interface has the address 10.0.0.1/20,
a ipv4 address is needed on this interface so the dhcp part of ddhcp is able
to bind on this interface. There is no need for an ipv4 address on the server0
interface because, we use ipv6 multicast and link local addresses for d2d communication.

You can setup a basic ddhcp network testing enviroment by calling

    # ./network-test net-init <number>

to create a virtual network for <number> of ddhcp instances. You
will need to have privileges to create network namespaces. Short
use sudo and check the network-test script upfront.

To start the (n-1)-th instance of ddhcp in your test environment
use for example, we also reduce the tentative timeout from 12 to 3 seconds:

    # ./network-test srv-start <n> ./ddhcp -t 3

After starting multiple instances you can make dhcp request
against specific instances of ddhcp by starting dhcp clients pointed
to the cltX interfaces. For example by

    # dhclient -sf /dev/null -d -v clt0

for the first ddhcp instance. You can create multiple parallel running clients
with different mac addresses via:

   # ./network-test clt-start <n>

To deconfigure the setup you can call.

    # ./network-test net-stop

Gluon Packages
--------------

For a maintained gluon package description see

  https://github.com/sargon/gluon-sargon
